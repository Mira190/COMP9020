#开始第三周的总结！
1 基本概念 walk trail path
walk是连接顶点的边的序列
trail是没有重复边的walk
path是没有重复顶点的walk

2 连通性
对于一个无向图:。
连通集(Connectedset/graph):如果图中的每一对顶点都由一条路径连接，则称该图为连通的。换句话说，对于任意的顶点对u,v€U，
存在一条路径连接它们。连通集是指图中满足这一条件的最大的顶点集合。
对于一个有向图:
强连通集(Strongly connected set/graph):如果图中的每一对顶点都由一个双向的有向路径连接，则称该图为强连通的。
换句话说，对于任意的顶点对u,vEU存在一条从u到v和一条从v到u的有向路径。强连通集是指图中满足这一条件的最大的顶点集合。
在图 G =(V,E)中，如果每对顶点u,v∈U都由一条路径连接，则称顶点集合UCV为图G的一个连通分量(connectedcomponent)。并且，该集合U是具有此属性的最大集合。

3 顶点
在无向图中，顶点的度(Degree ofa vertex)表示与该顶点相关联的边的数量。具体地说，对于一个顶点v，其度数 deg(v)定义为与顶点v相连的顶点数目。
换句话说，deg(v)就是与顶点v相连的边的数量。
正则图(Regular graph)是指图中所有顶点的度数都相等。
图G=(V,E)的度序列(Degreesequence)用 Do,D1,D2,...,Dk表示，其中 D， 表示度数为讠的顶点的数量。
那么问题是，Do+ D1+...+ Dk是多少?
事实上，每条边都会贡献两个度数，一个给边的一个端点，一个给另一个端点。因此，图中所有顶点的度数之和等于边的数量的两倍，即:
∑v∈V deg(v) = 2·|E|;
所以，顶点度数的总和始终是偶数。
奇度数顶点的数量是偶数

4 入度总和等于出度总和

5  cycle
闭合通路（closed walk）：指起点和终点相同的行走。
环（cycle）：指长度为3或更长（在有向图中为2或更长）的闭合行走，其中除了起点和终点之外的顶点都是不同的。
无环行走（acyclic walk，相当于路径）：指路径上的所有顶点都是不同的。
一个闭合通路 C =(e1,...,en)是一个环，如果移除任意一条边都会留下一条路径。(展示“任意”条件的必要性!)
如果一个闭合通路具有相同数量的边和顶点，并且没有子行走也具有这个性质，那么它是一个环。(展示“子行走”条件的必要性，
即存在不是环但边数和顶点数相等的图:每个这样的图必须包含一个环!)

6 树(Trees)
无环图(acyclic graph):不包含任何环的图。
树(Tree):连通的无环图。

7 二分图
二分图(Bipartite Graphs)
二分图是指可以将图的顶点划分为两个不相交的集合 V = V1 ∪ V2，并且每条边都连接一个属于  V1  的顶点和一个属于  V2 的顶点的图。
在二分图中，没有两个属于同一个集合的顶点之间存在边。这种特性使得二分图在建模许多问题时非常有用，例如在调度问题、网络流问题、以及匹配问题中。
一个图是无环的，当且仅当它是一个森林(若干个不相交的树的集合(collection of disjoint trees)）
注意事项:
图 G 是一棵树，当且仅当它是无环的，且|V|=|EG|+ 1。(展示这如何暗示图是连通的!
有正好一条路径连接任意两个顶点。
G 是连通的，但如果移除任意一条边就会变为非连通。
G 是无环的，但如果添加任意一条边就会形成环。
有根树（Rooted Trees）:
一棵有根树是指指定了一个顶点为根的树。它对边有一个方向：从父节点到子节点。
它也定义了节点的层级编号（或深度），即节点到根的距离。
在计算机科学中，另一个常见的概念是有向无环图（DAG）

8 特殊图
完全图 Kn:
完全图 K,是指具有n个顶点的图，其中每对顶点之间都有一条边相连，也就是说所有的顶点都彼此直接相连。一个完全图 K,具有 n（n-1）/2 条边。
完全二分图 Km,n:
完全二分图 K 具有 m +n个顶点，被划分为两个不相交的集合，其中一个集合有几个顶点，另一个集合有 m个顶点。所有来自不同集合的顶点之间都有边相连而来自相同集合的顶点之间没有边相连。这个图的边数为 m·n。
完全k-部图Kmi…..,mk
完全 k-部图具有 m1 +...+ mk 个顶点，被划分为k个不相交的集合，分别有 m1,m2,..,mk 个顶点。所有来自不同集合的顶点之间都有边相连而来自相同集合的顶点之间没有边相连。该图的边数出乘积∑;mimm;给出。
这些图是完全图 K1,...,1 的推广

9 图同构
图同构(Graphlsomorphisms)指的是两个图之间存在一个--对应的映射，使得这个映射保持图结构中的边和顶点之间的关系。
具体来说，设φ:G-》H是一个图同构映射，那么满足以下两个条件:
φ:V->V是一个双射，即从图 G 的顶点集到图 H 的顶点集的一个--对应。
对于图 G 中的任意两个顶点: 和 y，它们之间存在一条边当且仅当 φ(:)和 φ(y)之间也存在一条边。
换句话说，对于图G 中的每一条边(,y)，都有对应的一条边(φ(æ),中(y))存在于图 H 中。
ϕ : G −→H is a graph isomorphism if
 (i) ϕ : VG −→ VH is a bijection
 (ii) (x,y) ∈ EG iff (ϕ(x),ϕ(y)) ∈ EH
如果两个图之间存在至少一个图同构映射，则称这两个图是同构的。

10搜索和遍历
搜索：探索图直到找到特定的顶点为止。
遍历：检查图中所有顶点，可以以深度优先或广度优先方式进行。

11深度优先和广度优先
两种常见的图探索算法是深度优先搜索/遍历(DFS)和广度优先搜索/遍历(BFS)
这两种算法都遵循相同的结构:
检查一个顶点v。
发现新的顶点(v 的邻居)
移动到下一个已发现但尚未检查的顶点。
DFS(深度优先搜索)
按照最近发现的顺序检查顶点。
通过递归或使用栈实现。
BFS(广度优先搜索)
按照最近发现的顺序检查顶点。
通过使用队列实现。
这两种算法提供了不同的遍历顺序，适用于不同的问题和应用场景。
